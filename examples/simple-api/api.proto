syntax = "proto3";

package example.v1;

import "sebuf/http/annotations.proto";
import "sebuf/http/headers.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/SebastienMelki/sebuf/examples/simple-api/api";

// UserService manages users in the system
service UserService {
  option (sebuf.http.service_config) = {
    base_path: "/api/v1"
  };
  option (sebuf.http.service_headers) = {
    required_headers: [
      {
        name: "X-API-Key"
        description: "API authentication key"
        type: "string"
        required: true
        format: "uuid"
        example: "123e4567-e89b-12d3-a456-426614174000"
      }
    ]
  };

  // Create a new user
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (sebuf.http.error_config) = {
      custom_error: true,
    };

    option (sebuf.http.config) = {
      path: "/users"
    };
  }

  // Get a user by ID
  rpc GetUser(GetUserRequest) returns (User) {
    option (sebuf.http.config) = {
      path: "/users/get"
    };
  }

  // Login with different authentication methods
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (sebuf.http.config) = {
      path: "/auth/login"
    };
    option (sebuf.http.method_headers) = {
      required_headers: [
        {
          name: "X-Request-ID"
          description: "Unique request identifier for tracing"
          type: "string"
          required: true
          format: "uuid"
        }
      ]
    };
  }
}

// User represents a system user
message User {
  // User ID must be a valid UUID
  string id = 1 [
    (buf.validate.field).string.uuid = true,
    (sebuf.http.field_examples) = {
      values: [
        "550e8400-e29b-41d4-a716-446655440000",
        "f47ac10b-58cc-4372-a567-0e02b2c3d479",
        "123e4567-e89b-12d3-a456-426614174000"
      ]
    }
  ];

  // Name must be between 1 and 100 characters
  string name = 2 [
    (buf.validate.field).string = {
      min_len: 1,
      max_len: 100
    },
    (sebuf.http.field_examples) = {
      values: ["Alice Johnson", "Bob Smith", "Charlie Davis", "Diana Wilson"]
    }
  ];

  // Email must be a valid email address
  string email = 3 [
    (buf.validate.field).string.email = true,
    (sebuf.http.field_examples) = {
      values: [
        "alice.johnson@example.com",
        "bob.smith@example.com",
        "charlie.davis@example.com",
        "diana.wilson@example.com"
      ]
    }
  ];

  // Creation timestamp
  int64 created_at = 4 [(sebuf.http.field_examples) = {
    values: ["1704067200", "1704153600", "1704240000"]
  }];
}


message CreateUserError {
  string bla = 1;
  string error_message = 2;
}

// Request to create a new user
message CreateUserRequest {
  // Name is required and must be between 2 and 100 characters
  string name = 1 [
    (buf.validate.field).string = {
      min_len: 2,
      max_len: 100
    },
    (sebuf.http.field_examples) = {
      values: ["Alice Johnson", "Bob Smith", "Charlie Davis"]
    }
  ];

  // Email is required and must be a valid email address
  string email = 2 [
    (buf.validate.field).string.email = true,
    (sebuf.http.field_examples) = {
      values: ["alice@example.com", "bob@example.com", "charlie@example.com"]
    }
  ];
}


// Request to get a user by ID
message GetUserRequest {
  // User ID must be a valid UUID
  string id = 1 [(buf.validate.field).string.uuid = true];
}

// Login request supporting multiple authentication methods
message LoginRequest {
  // Different ways to authenticate
  oneof auth_method {
    EmailAuth email = 1;
    TokenAuth token = 2;
    SocialAuth social = 3;
  }
}

// Email and password authentication
message EmailAuth {
  // Email must be a valid email address
  string email = 1 [(buf.validate.field).string.email = true];

  // Password must be at least 8 characters
  string password = 2 [(buf.validate.field).string.min_len = 8];
}

// Token-based authentication
message TokenAuth {
  // Token must be at least 10 characters and non-empty
  string token = 1 [(buf.validate.field).string.min_len = 10];
}

// Social media authentication
message SocialAuth {
  // Provider must be one of the allowed values
  string provider = 1 [(buf.validate.field).string = {
    in: ["google", "github", "facebook", "apple"]
  }];

  // Access token must be non-empty and at least 20 characters
  string access_token = 2 [(buf.validate.field).string.min_len = 20];
}

// Login response with access token
message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
  int64 expires_in = 3;
  User user = 4;
}

// AdminService manages administrative operations
service AdminService {
  option (sebuf.http.service_config) = {
    base_path: "/api/v1/admin"
  };
  option (sebuf.http.service_headers) = {
    required_headers: [
      {
        name: "X-Admin-Token"
        description: "Admin authentication token"
        type: "string"
        required: true
        format: "uuid"
      }
    ]
  };

  // Get system statistics
  rpc GetStats(GetStatsRequest) returns (StatsResponse) {
    option (sebuf.http.config) = {
      path: "/stats"
    };
  }

  // Delete a user from the system
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (sebuf.http.config) = {
      path: "/users/delete"
    };
  }
}

// Request for system statistics
message GetStatsRequest {
  // Optional time range filter
  int64 start_time = 1;
  int64 end_time = 2;
}

// System statistics response
message StatsResponse {
  int64 total_users = 1;
  int64 active_sessions = 2;
  int64 requests_today = 3;
  double avg_response_time_ms = 4;
}

// Request to delete a user
message DeleteUserRequest {
  // User ID must be a valid UUID
  string id = 1 [(buf.validate.field).string.uuid = true];

  // Reason for deletion
  string reason = 2 [(buf.validate.field).string.min_len = 5];
}

// Response after deleting a user
message DeleteUserResponse {
  bool success = 1;
  string message = 2;
}
