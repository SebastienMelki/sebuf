package whatif

// ScenarioLevel indicates whether a scenario applies to a service or method.
type ScenarioLevel int

const (
	ServiceLevel ScenarioLevel = iota
	MethodLevel
)

// Scenario represents a test scenario generated by LLM or defined manually.
type Scenario struct {
	Name         string                 // Snake case name (e.g., "expired_token")
	Description  string                 // Human-readable description
	FunctionName string                 // Go function name (e.g., "ExpiredToken")
	Level        ScenarioLevel          // Service or method level
	Method       string                 // Method name if method-level
	FieldValues  map[string]interface{} // Field overrides for response
	Error        *ErrorScenario         // Error response if applicable
	Latency      string                 // Added latency (e.g., "3s")
}

// ErrorScenario defines an error response.
type ErrorScenario struct {
	Code    int    // HTTP status code
	Message string // Error message
}

// LLMResponse represents the structured response from the LLM.
type LLMResponse struct {
	Scenarios []LLMScenario `json:"scenarios"`
}

// LLMScenario is the JSON structure returned by the LLM.
type LLMScenario struct {
	Name        string                 `json:"name"`
	Description string                 `json:"description"`
	FunctionName string                `json:"function_name"`
	FieldValues map[string]interface{} `json:"field_values,omitempty"`
	Error       *LLMError              `json:"error,omitempty"`
	Latency     string                 `json:"latency,omitempty"`
}

// LLMError is the error structure in LLM response.
type LLMError struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Convert LLMScenario to Scenario
func (ls LLMScenario) ToScenario(level ScenarioLevel, method string) Scenario {
	s := Scenario{
		Name:         ls.Name,
		Description:  ls.Description,
		FunctionName: ls.FunctionName,
		Level:        level,
		Method:       method,
		FieldValues:  ls.FieldValues,
		Latency:      ls.Latency,
	}
	
	if ls.Error != nil {
		s.Error = &ErrorScenario{
			Code:    ls.Error.Code,
			Message: ls.Error.Message,
		}
	}
	
	return s
}