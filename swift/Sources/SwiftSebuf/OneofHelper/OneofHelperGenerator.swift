//
//  OneofHelperGenerator.swift
//  SwiftSebuf
//
//  Created by Khaled Chehabeddine on 08/09/2025.
//  Copyright Â© 2025 Sebuf. All rights reserved.
//

import Foundation
import SwiftProtobufPluginLibrary

struct OneofHelperGenerator: Generator {

	private let descriptorSet: DescriptorSet

	init(descriptorSet: DescriptorSet) {
		self.descriptorSet = descriptorSet
	}

	func generate() -> CodeGeneratorResponse {
		var response: CodeGeneratorResponse = .init()
		response.supportedFeatures = UInt64(CodeGeneratorResponse.Feature.proto3Optional.rawValue)
		for file in descriptorSet.files {
			guard let generatedFile: CodeGeneratorResponse.File = generateFile(file) else { continue }

			response.file.append(generatedFile)
		}
		return response
	}

	private func generateFile(_ fileDescriptor: FileDescriptor) -> CodeGeneratorResponse.File? {
		guard fileDescriptor.shouldGenerate else { return nil }

		let name: String = fileDescriptor.name.replacingOccurrences(of: ".proto", with: "_helper.pb.swift")

		var content: String = generateFileHeader()
		for message in fileDescriptor.messages {
			content += generateMessageHelper(message)
		}

		var file: CodeGeneratorResponse.File = .init()
		file.name = name
		file.content = content
		return file
	}

	private func generateFileHeader() -> String {
		"""
		// Code generated by protoc-gen-swift-oneof-helper. DO NOT EDIT.

		import Foundation
		import SwiftProtobuf

		"""
	}

	private func generateMessageHelper(_ messageDescriptor: Descriptor) -> String {
		func generateInitializer() -> String {
			var parameters: [String] = []
			var assignments: [String] = []

			for field in messageDescriptor.fields where field.oneofIndex == nil {
				let parameterName = field.name
				let parameterType = field.type
				parameters.append("\(parameterName): \(parameterType)")
				assignments.append("\t\tself.\(parameterName) = \(parameterName)")
			}

			guard !parameters.isEmpty else { return "" }

			for oneof in messageDescriptor.oneofs {
				let parameterName = oneof.name
				let parameterType = oneof.containingType.typeName
				parameters.append("\(parameterName): \(parameterType)")
				assignments.append("self.\(parameterName) = \(parameterName)")
			}

			let parametersString: String = parameters.joined(separator: ", ")
			let assignmentsString: String = assignments.joined(separator: "\n")
			return """
			extension \(messageDescriptor.typeName) {
			
			\tinit(\(parametersString)) {
			\t\tself.init()
			\t\t\(assignmentsString)
			\t}
			}
			"""
		}

		var content: String = ""
		content += generateInitializer()
		for message in messageDescriptor.messages {
//			guard !nestedMessage.options.mapEntry else { continue }

			content += generateInitializer()
		}
		return content
	}
}

private extension FileDescriptor {

	var shouldGenerate: Bool {
		self.messages.contains { message in
			message.hasFields
		}
	}
}

private extension Descriptor {

	var hasFields: Bool {
		let hasRegularField: Bool = self.fields.contains { field in
			field.oneofIndex == nil
		}
		let hasOneofField: Bool = !self.realOneofs.isEmpty
		let hasNestedField: Bool = self.messages.contains { message in
			message.hasFields
		}
		return hasRegularField || hasOneofField || hasNestedField
	}
}
