syntax = "proto3";

package sebuf.http;

option go_package = "github.com/SebastienMelki/sebuf/http;http";

// HTTPStatusCode represents standard HTTP status codes for errors
enum HTTPStatusCode {
  HTTP_STATUS_CODE_UNSPECIFIED = 0;
  
  // 4xx Client Errors
  BAD_REQUEST = 400;
  UNAUTHORIZED = 401;
  PAYMENT_REQUIRED = 402;
  FORBIDDEN = 403;
  NOT_FOUND = 404;
  METHOD_NOT_ALLOWED = 405;
  NOT_ACCEPTABLE = 406;
  PROXY_AUTHENTICATION_REQUIRED = 407;
  REQUEST_TIMEOUT = 408;
  CONFLICT = 409;
  GONE = 410;
  LENGTH_REQUIRED = 411;
  PRECONDITION_FAILED = 412;
  PAYLOAD_TOO_LARGE = 413;
  URI_TOO_LONG = 414;
  UNSUPPORTED_MEDIA_TYPE = 415;
  RANGE_NOT_SATISFIABLE = 416;
  EXPECTATION_FAILED = 417;
  UNPROCESSABLE_ENTITY = 422;
  TOO_MANY_REQUESTS = 429;
  
  // 5xx Server Errors
  INTERNAL_SERVER_ERROR = 500;
  NOT_IMPLEMENTED = 501;
  BAD_GATEWAY = 502;
  SERVICE_UNAVAILABLE = 503;
  GATEWAY_TIMEOUT = 504;
  HTTP_VERSION_NOT_SUPPORTED = 505;
}

// ValidationError represents a validation failure with detailed field/header violations
message ValidationError {
  // Overall validation error message
  string message = 1;
  
  // List of specific validation violations
  repeated Violation violations = 2;
  
  // Violation represents a single validation failure
  message Violation {
    // The type of violation (body field or header)
    oneof violation_type {
      BodyViolation body = 1;
      HeaderViolation header = 2;
    }
  }
  
  // BodyViolation represents a validation failure for a request body field
  message BodyViolation {
    // Field path (e.g., "user.email" for nested fields)
    string field = 1;
    
    // Human-readable description of the violation
    string description = 2;
    
    // The constraint that was violated (e.g., "string.min_len", "required")
    string constraint = 3;
  }
  
  // HeaderViolation represents a validation failure for an HTTP header
  message HeaderViolation {
    // Header name (e.g., "X-API-Key")
    string name = 1;
    
    // Human-readable description of the violation
    string description = 2;
    
    // Expected format or value (e.g., "UUID", "RFC3339 timestamp")
    string expected = 3;
  }
}

// StandardError represents a standard error response with HTTP status code
message StandardError {
  // HTTP status code for the error
  HTTPStatusCode code = 1;
  
  // Error message
  string message = 2;
}